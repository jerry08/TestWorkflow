name: main

on:
  push:
  pull_request:
  release:
    types: [published]


jobs:
  pack:
    runs-on: windows-latest

    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Print outputs
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Setup env var
        run: |
          echo MESSAGE_TEST2=format('Hello {0} {1} {2}', "Mona", 'the', 'Octocat') >> $GITHUB_ENV
          echo RELEASE_NAME=format('ConsoleApp6Test {0}', '${{ env.RELEASE_VERSION }}') >> $GITHUB_ENV
          echo "RELEASE_NAME2 $RELEASE_NAME"
          echo "RELEASE_NAME2=format('ConsoleApp6Test {0}', '${{ env.RELEASE_VERSION }}')" >> $GITHUB_ENV
          echo "${{ toJSON(env.RELEASE_VERSION) }}"
          echo "${{ github.event.repository.name }}-$('${{ github.ref_name }}' | tr -d v)"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x

      - name: Publish
        run: dotnet publish ConsoleApp6/ -o ConsoleApp6/bin/Publish --configuration Release

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ConsoleApp6
          path: ConsoleApp6/bin/Publish

  deploy:
    if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
    needs: pack
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write

    steps:
      # Checkout required for running git commands, etc.
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set variables
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          echo "TAG_MESSAGE=$(git tag -l --format='%(contents:subject)' ${GITHUB_REF#refs/*/})" >> $GITHUB_ENV
          echo "PACKAGE_NAME=${{ github.event.repository.name }}-$('${{ github.ref_name }}' | tr -d v).zip" >> $GITHUB_ENV

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ConsoleApp6
          path: ConsoleApp6

      - name: Create package
        #run: Compress-Archive -Path ConsoleApp6/* -DestinationPath ConsoleApp6.zip -Force
        run: Compress-Archive -Path ConsoleApp6/* -DestinationPath ${{ env.PACKAGE_NAME }} -Force
        shell: pwsh

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.PACKAGE_NAME }}
          draft: false
          body: ${{ env.TAG_MESSAGE }}

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Logging
        run: |
          echo "${{toJSON(github.event)}}"

      - name: Set Release Notes
        run: |
          content=${{ toJSON(github.event.release.body) }}
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "RELEASE_BODY $content"
          echo "RELEASE_BODY=$content" >> $GITHUB_ENV
        
      - name: Notify Discord
        uses: tyrrrz/action-http-request@v1
        with:
          url: ${{ secrets.DISCORD_WEBHOOK }}
          method: POST
          headers: |
            Content-Type: application/json; charset=UTF-8
          body: |
            {
              "username": "My Test1 Bot",
              "avatar_url": "https://i.imgur.com/4M34hi2.png",
              "content": "**${{ github.event.repository.name }}** new version released!\nVersion: `${{ github.ref_name }}`\n\n${{ github.event.head_commit.message }}\n\nDownload: <${{ github.event.release.assets[0].browser_download_url }}>"
            }
